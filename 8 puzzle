import heapq

# Define the goal state for the puzzle
goal_state = (1, 2, 3, 4, 5, 6, 7, 8, 0)
# Define the initial state of the puzzle
initial_state = (1, 2, 3, 0, 4, 5, 7, 8, 6)

# Function to calculate the Manhattan distance for a given state
def manhattan_distance(state):
    distance = 0
    for i in range(9):
        if state[i] != 0:  # Skip the empty tile
            goal_index = goal_state.index(state[i])  # Find the index in the goal state
            goal_row = goal_index // 3  # Calculate the goal row
            goal_col = goal_index % 3   # Calculate the goal column
            curr_row = i // 3           # Current row
            curr_col = i % 3            # Current column
            # Add the distance to the total
            distance += abs(goal_row - curr_row) + abs(goal_col - curr_col)
    return distance

# Function to generate possible moves from the current state
def generate_moves(state):
    moves = []
    empty_index = state.index(0)  # Find the index of the empty tile
    # Check for possible moves and add them to the list
    if empty_index - 3 >= 0:  # Move up
        moves.append(empty_index - 3)
    if empty_index + 3 < 9:   # Move down
        moves.append(empty_index + 3)
    if empty_index % 3 != 0:  # Move left
        moves.append(empty_index - 1)
    if (empty_index + 1) % 3 != 0:  # Move right
        moves.append(empty_index + 1)
    return moves

# Function to solve the puzzle using A* algorithm
def solve_puzzle(initial_state):
    open_set = [(manhattan_distance(initial_state), initial_state)]
    heapq.heapify(open_set)  # Transform the list into a heap
    closed_set = set()  # Set to track visited states
    parent_map = {initial_state: None}  # Map to reconstruct the path
    open_set_states = {initial_state}  # Set to track states in open_set

    while open_set:
        _, current_state = heapq.heappop(open_set)  # Get the state with the lowest cost
        if current_state == goal_state:  # Check if we reached the goal
            path = []
            while current_state is not None:
                path.insert(0, current_state)  # Reconstruct the path
                current_state = parent_map[current_state]
            return path
        
        closed_set.add(current_state)  # Mark the current state as visited
        moves = generate_moves(current_state)  # Generate possible moves
        
        for move in moves:
            new_state = list(current_state)
            # Swap the empty tile with the tile in the move position
            new_state[current_state.index(0)], new_state[move] = new_state[move], new_state[current_state.index(0)]
            new_state = tuple(new_state)  # Convert back to tuple
            
            if new_state not in closed_set and new_state not in open_set_states:
                # Add the new state to the open set
                heapq.heappush(open_set, (manhattan_distance(new_state), new_state))
                parent_map[new_state] = current_state  # Track the parent state
                open_set_states.add(new_state)  # Add to the set of open states

# Execute the puzzle solver and print the solution path
solution_path = solve_puzzle(initial_state)
for step, state in enumerate(solution_path):
    print(f"Step {step}:")
    for i in range(0, 9, 3):
        print(state[i:i+3])  # Print the state in a 3x3 format
    print()
